name: Archive Old Branches

on:
  workflow_dispatch:
  schedule:
    - cron: '0 4 1 */3 *' # At 04:00 on the 1st of every 3rd month.
  push:

jobs:
  ArchiveStaleBranches:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for branch deletion
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed to retrieve full commit log

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip google-generativeai

      - name: Install GitHub CLI
        run: |
          # Get the newest version
          (type -p wget >/dev/null || (sudo apt update && sudo apt-get install wget -y))
          sudo mkdir -p -m 755 /etc/apt/keyrings
          wget -qO- https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null
          sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y

      - name: Filter and Archive Stale Branches
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          AGE_CUTOFF=800 # In days
          # Fetch all branches
          git branch -r | grep -v '\->' | sed 's/origin\///' > branches.txt

          # Loop through branches
          while read branch; do
          
            # Skip main branch
            if [ "$branch" = "master" ] || [ "$branch" = "main" ]; then
              echo "  Main branch: ${branch}. Skipping..."
              continue
            fi
            
            # Skip if open PR exists
            if [ -n "$(gh pr list --head $branch --json number --jq '.[]' 2>/dev/null)" ]; then
              echo "  There exists an open PR for branch $branch. Skipping..."
              continue
            fi
          
          # Get last commit date
          lastCommitDate=$(gh api repos/${{ github.repository }}/commits/$branch --jq '.commit.committer.date')

          # Calculate branch age in days
          branchAgeDays=$(( ($(date -u +%s) - $(date -u -d "$lastCommitDate" +%s)) / 86400 ))

          # Check whether the branch is old enough
          if [ $branchAgeDays -lt $AGE_CUTOFF ]; then
            echo "  Branch $branch is still active. Last commit $branchAgeDays days ago. Skipping..."
          else
            echo "  Branch $branch is $branchAgeDays days old. Archiving..."

            # Get number of new commits
            commitCount=$(gh api repos/${{ github.repository }}/compare/master...$branch --jq '.commits | length')
          
            if [ $commitCount -gt 0 ]; then
              # Format the last commit date
              lastCommitDateF=$(date -u -d "$lastCommitDate" +"%B %d, %Y")

              # Get the first commit date
              firstCommitDate=$(gh api repos/${{ github.repository }}/branches/$branch --jq '.commit.committer.date')
              firstCommitDateF=$(date -u -d "$firstCommitDate" +"%B %d, %Y")

              # Get contributors to the branch
              contributors=$(gh api repos/${{ github.repository }}/compare/master...$branch --jq '.commits[] | "  - \(.commit.author.name) (@\(.author.login))  "' | sort | uniq)

              # Get a summary of the branch changes using Google's Gemini AI
              diff=$(git diff origin/master...origin/$branch)
              summary=$(python .github/workflows/create_pr_summary.py <<< "$diff")

              # Create the PR body with contributors
              prBody="## **Archiving branch \`$branch\`**
            - **Last commit on:** $lastCommitDateF
            - **First commit on:** $firstCommitDateF  
            - **Total number of commits:** $commitCount  
            - **Contributors:**  
            $contributors  
            ## Changes Summary  
            *(Generated using Gemini AI)*  
            $summary"
          
              # Create PR, close PR, and delete the branch
              echo "  Create PR for ${branch}..."
              prURL=$(gh pr create --title "Archive branch \"$branch\"" --body "$prBody" --base master --head $branch --dry-run)

              # Wait for the PR to be created and close it
              maxRetries=5
              retryInterval=5  # seconds

              for ((i=1; i <= $maxRetries; i++)); do
                if gh pr view $prURL &>/dev/null; then
                  echo "  Closing the PR..."
                  gh pr close $prURL
                  # git push origin --delete $branch
                  echo "  Branch $branch archived and deleted."
                  break 2
                fi
                  echo "  Waiting for PR $prNumber to be created. Retrying in $retryInterval seconds..."
                  sleep $retryInterval
              done
          
              if [[ -z "$prNumber" ]]; then
                echo "  Failed to find and close the PR after $maxRetries retries."
              fi
            else
              echo "  No commits between $branch and master. Deleting branch directly..."
              # git push origin --delete $branch
            fi
          fi
          
          done < branches.txt
