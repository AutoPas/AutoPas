        - using Random, Distributions
        - # using ..Simulator.Particles
        - 
        - function generateCubeGrid(cubeGrid, mId)
      192     particles = Vector{MoleculeJ{Float64}}([])
        -     id_ = 0
        0     generator = createRandomGenerator()
        0     for x in 1 : cubeGrid.particlesPerDimension[1]
        0         for y in 1 : cubeGrid.particlesPerDimension[2]
        0             for z in 1 : cubeGrid.particlesPerDimension[3]
     4800                 pos = [(x-1) * cubeGrid.particleSpacing, (y-1) * cubeGrid.particleSpacing, (z-1) * cubeGrid.particleSpacing] + cubeGrid.bottomLeftCorner
        0                 v = cubeGrid.velocity + addBrownianMotion(cubeGrid.factorBrownianMotion, generator)
        0                 particle = MoleculeJ{Float64}(pos, v, mId, cubeGrid.particleType)
      832                 push!(particles, particle)
        0                 mId = mId + 1
        0             end
        0         end
        0     end
        0     return particles, mId
        - end
        - 
        - function generateObject(particleObject, mId)
        - 
        -     if typeof(particleObject) == typeof(CubeGridInput())
        0         return generateCubeGrid(particleObject, mId)
        -     end
        - 
        - end
        - 
        - function createRandomGenerator()
        - 
        -     Random.seed!(35)
        -     return Normal()
        - 
        - end
        - 
        - function addBrownianMotion(average_velocity, randomGenerator)::Vector{Float64}
     4800     return average_velocity * rand(randomGenerator, 3)
        - end
