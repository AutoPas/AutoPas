/**
 * @file main.cpp
 * @date 23.02.2018
 * @author F. Gratl
 */

#if defined(AUTOPAS_INTERNODE_TUNING)
#include <mpi.h>
#endif

#include <iostream>

#include "Simulation.h"
#include "autopas/utils/WrapOpenMP.h"
#include "parsing/MDFlexParser.h"

// Declare the main AutoPas class as extern template instantiation. It is instantiated in AutoPasClass.cpp.
extern template class autopas::AutoPas<Simulation::ParticleType>;

/**
 * The main function for md-flexible.
 * @param argc
 * @param argv
 * @return
 */
int main(int argc, char **argv) {
#if defined(AUTOPAS_INTERNODE_TUNING)
  MPI_Init(&argc, &argv);
  int rank;
  MPI_Comm_rank(MPI_COMM_WORLD, &rank);
  std::cout << "rank: " << rank << std::endl;
#endif
  // start simulation timer
  Simulation simulation;
  // Parsing
  MDFlexConfig config;

  // parse input and only continue of parsing went without hickups
  if (auto parserExitCode = MDFlexParser::parseInput(argc, argv, config);
      parserExitCode != MDFlexParser::exitCodes::success) {
    if (parserExitCode == MDFlexParser::exitCodes::parsingError) {
      exit(EXIT_FAILURE);
    } else {
      exit(EXIT_SUCCESS);
    }
  }
  // make sure sim box is big enough
  config.calcSimulationBox();

  // print config to console
  std::cout << config;

  // select either std::out or a logfile for autopas log output.
  // This does not affect md-flex output.
  std::streambuf *streamBuf;
  std::ofstream logFile;
  if (config.logFileName.value.empty()) {
    streamBuf = std::cout.rdbuf();
  } else {
    logFile.open(config.logFileName.value);
    streamBuf = logFile.rdbuf();
  }
  std::ostream outputStream(streamBuf);

  // Initialization. Use particle type from the Simulation class.
  autopas::AutoPas<Simulation::ParticleType> autopas(outputStream);
  simulation.initialize(config, autopas);

  std::cout << std::endl << "Using " << autopas::autopas_get_max_threads() << " Threads" << std::endl;

  // Simulation
  std::cout << "Starting simulation... " << std::endl;
  simulation.simulate(autopas);
  std::cout << "Simulation done!" << std::endl << std::endl;

  // Statistics about the simulation
  simulation.printStatistics(autopas);

  // print config.yaml file of current run
  if (config.dontCreateEndConfig.value) {
    std::ofstream configFileEnd("MDFlex_end_" + autopas::utils::Timer::getDateStamp() + ".yaml");
    configFileEnd << "# Generated by:" << std::endl;
    configFileEnd << "# ";
    for (int i = 0; i < argc; ++i) {
      configFileEnd << argv[i] << " ";
    }
    configFileEnd << std::endl;
    configFileEnd << config;
    configFileEnd.close();
  }

#if defined(AUTOPAS_INTERNODE_TUNING)
  MPI_Finalize();
#endif

  return EXIT_SUCCESS;
}
