/**
 * @file MDFlexSingleNode.h
 * @author J. KÃ¶rner
 * @date 07.04.2021
 */

#include "MDFlexSingleNode.h"

void MDFlexSingleNode::initialize(int argc, char** argv){
#if defined(AUTOPAS_INTERNODE_TUNING)
  MPI_Init(&argc, &argv);
  int rank;
  MPI_Comm_rank(MPI_COMM_WORLD, &rank);
  std::cout << "rank: " << rank << std::endl;
#endif

	MDFlexSimulation::initialize(argc, argv);
}

void MDFlexSingleNode::initializeAutoPas(){
	// select either std::out or a logfile for autopas log output.
 	// This does not affect md-flex output.
 	if (_configuration->logFileName.value.empty()) {
   	_streamBuffer = std::cout.rdbuf();
 	} else {
   	_logFile.open(_configuration->logFileName.value);
   	_streamBuffer = _logFile.rdbuf();
 	}
 	_outputStream = new std::ostream(_streamBuffer);

  // Initialization. Use particle type from the Simulation class.
  _autopas = new autopas::AutoPas<Simulation::ParticleType>(*_outputStream);
  _simulation->initialize(*_configuration, *_autopas);

  std::cout << std::endl << "Using " << autopas::autopas_get_max_threads() << " Threads" << std::endl;
}

void MDFlexSingleNode::run(){
	std::cout << "Starting simulation... " << std::endl;
	MDFlexSimulation::run();
  std::cout << "Simulation done!" << std::endl << std::endl;
}

void MDFlexSingleNode::finalize(int argc, char** argv){
  // Statistics about the simulation
  _simulation->printStatistics(*_autopas);

  // print config.yaml file of current run
  if (_configuration->dontCreateEndConfig.value) {
    std::ofstream configFileEnd("MDFlex_end_" + autopas::utils::Timer::getDateStamp() + ".yaml");
    configFileEnd << "# Generated by:" << std::endl;
    configFileEnd << "# ";
    for (int i = 0; i < argc; ++i) {
      configFileEnd << argv[i] << " ";
    }
    configFileEnd << std::endl;
    configFileEnd << *_configuration;
    configFileEnd.close();
  }

	delete _autopas;
	delete _outputStream;

#if defined(AUTOPAS_INTERNODE_TUNING)
  MPI_Finalize();
#endif
}
