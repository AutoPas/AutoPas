Please read this carefully before setting up the code-generator.

code_generator can be used to generate code using CHiLL. 
CHiLL and its components can be downloaded from (http://ctop.cs.utah.edu).

The code_generator is designed to take advantage of the available free
machines to do a distributed code generation.

The script "setup_code_gen_hosts.sh" must be in the working directory
of the master code-server.  It will be called automatically at the
beginning of a harmonization session to initialize the work directories
on the slave code-generator machines.

The work directories on the slave code-generator are populated with the
required files for code-generation.  Information on how to specify which
files are required is provided below.

To use the code_generator:

  1) Make sure the Harmony session properly defines the following
     configuration keys:

        SERVER_URL
        TARGET_URL

     Explanations and examples for these keys can be found in the sample
     harmony.cfg provided with this distribution.

  2) Compile the code_generator binary via: `make all`

Let's assume the code_generator is installed in the <code_generator>
directory, and we want to generate code for a naive matrix
multiplication application called "gemm".

First create a directory called "gemm" within the <code_generator> directory.
Copy all files from <code_generator>/generic to gemm directory. Rename the 
chill_script.generic.sh to chill_script.gemm.sh

Files that need to be changed:

  generate_temp_script.sh
    This file takes the code transformation parameters as arguments and
    creates a chill script (named temp.script).

  code.properties
    This file defines some global environment variables.  The appname
    has to match the name of the directory (in this case gemm).  Other
    changes that need to be made are documented in the file itself.

  required_files.dat
    This file lists all of the files that are needed by CHiLL to
    generate code.  These files include SUIF intermediate files, a
    default output file (needed in case CHiLL receives an invalid
    configuration), code.properties, etc. More information can be
    found on the generic code.properties file itself.

Files that need to be created:

  gemm.[fc]
    Depending on if your target application is Fortran or C based.

  gemm_default.f
    This can be a copy of gemm.f

  gemm.sp2
    SUIF intermediate file: you can create this using chill_runner_f.sh.
    The runner script takes the appname (in this case gemm) as an argument
    and creates the intermediate files.

Things to remember:

  1) We assume that password-less login has been set up between the
     master and slave code-generators (and vice-versa).  This can be
     done via public key authentication (eg. ssh-keygen).

  2) We assume CHiLL and its components are locatable via PATH and
     LD_LIBRARY_PATH.  If not, please modify the CHILLHOME, OMEGA_P,
     and/or SUIFHOME environment variables in the code.properties file.

To launch the code_generator:
	$ ./code_generator <codegen_path>

Steps to run the code generator with example gemm application:

  These instructions are provided in code-server/README of
  the Active Harmony distribution.

  1) Working with code generator files

    a) Create a 'gemm' directory within the 'code-server' directory.
    b) Copy all files from 'code-server/generic'
       to the 'gemm' directory you created in step 1a.
    c) Rename 'chill_script.generic.sh' to 'chill_script.gemm.sh'.
    d) The following files need to be changed under 'gemm':

      i) generate_temp_script.sh (Used to specify the tunable parameters)
     ii) code.properties (Used to specify the PATH variables and appname)
    iii) required_files.dat (List of files necessary for slave code-server)
     iv) gemm.f or gemm.c
      v) gemm_default.f
     vi) gemm.sp2

  2) Launching the code generator:
	$ ./code_generator <codegen_path>

     For example, "./code_generator $HOME/codegen/flags"

Additional Details
  Let us assume that we will launch 6 slave code-generators on "armour"
  and 3 slave code-generators on "maxfli" from the master code-generator
  on "spoon".  The code should be sent to "brood00" when complete, and
  the Harmony server (also on "brood00") should be informed when new code
  is ready.

  Follow these steps for running the code_generator:

    1) The harmony configuration should have the following directives:
        SERVER_URL=ssh://maxfli//home/username/scratch/confs
        TARGET_URL=ssh://brood00//scratch0/username/code
        SLAVE_LIST=armour 6, maxfli 3
        SLAVE_PATH=/tmp/codegen

    2) In this matrix multiplication code generation example, the
       directory "gemm" has to be created within "code-server"
       directory.  Now copy all the files from "generic" directory to
       "gemm" directory.

    3) Rename "chill_script.generic.sh" to "chill_script.gemm.sh"

    4) In the "code.properties" file which is available under "gemm"
       directory, change the following "appname = gemm".

       Based on what file we are going to use (either a c or fortran) the
       following field is set accordingly. In this example, fortran is used.

         file_suffix=f

    5) Make sure the code_generator binary is up to date:
  
        make clean
        make

    6) The code generator should now be ready.  Launch it from the
       "code-server" directory with the following command:

        ./code_generator /home/username/scratch/confs

    7) For running the "hserver" with PRO example, open a new
       terminal, ssh into "brood00", and do the following:

        cd bin
        ./hserver

   10) Open another terminal and ssh into "brood00" and then change the
       directory to the "pro_example" folder:

        cd <HARMONY_ROOT>/example/code_generation

   11) Define the following environment variables:

        HARMONY_HOST=brood00
        HARMONY_PORT=1979

   12) Do the following:

        qsub -IV -lnodes=8

   14) Then do the following at the bash prompt:

        cd <HARMONY_ROOT>/example/code_generation

   15) For running the parallel examples, do the following:

        mpirun -np 8 ./gemm /scratch0/username/code &

    This runs the "gemm" client application for the code generation part.
