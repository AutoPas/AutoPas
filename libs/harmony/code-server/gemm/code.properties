#!/bin/bash

# this is a global "properties" file for code-generation.
#  Please note that there are no spaces between the lvalue and
#  the rvalue in variable definitions. Some versions of bash
#  do not like the spaces. So - sticking with the one that works
#  for all.

echo "initializing"

##################### CHiLL, OMEGA, SUIF Paths
# exports: indicate where the CHiLL components and libraries are.

CHILLHOME=
OMEGA_P=
SUIFHOME=

if [ -n "$CHILLHOME" ]; then
    PATH=$CHILLHOME/bin:$PATH
fi

if [ -n "$OMEGA_P" ]; then
    export OMEGA_P
fi

if [ -n "$SUIFHOME" ]; then
    PATH=$SUIFHOME/i386-linux/bin/:$PATH
    LD_LIBRARY_PATH=$SUIFHOME/i386-linux/solib:$LD_LIBRARY_PATH
fi

export PATH LD_LIBRARY_PATH
########################################

###################### loop names, languages
# remember that the appname should be the same as the directory name
#  for the loop. For example, if you want to tune for dgemv, you will have
#  to create a directory named "dgemv" within the code-generator directory
#  and have all the files necessary there.
appname=gemm
file_prefix=gemm
# fortran or c file?
file_suffix=f
########################################

###################### are we using a particular CHiLL version
use_default_chill=1
# if we are not using the default CHiLL, tell me what version of CHiLL you
#  want to use. Also - make sure you include this name in the 
#  required_files.dat so that this executable can be copied to all the
#  code generation hosts.
# Note the "./" which is required.
chill_exec_name="./chill.v.0.1.8 "

###################### local and remote hosts spec
# are we using remote hosts for compilation?
use_remote_hosts=1
# if use_remote_host is set to 1, we also need to provide the following 
#  parameters. username is your username
#username=

###################### COMPILATION
# what format should we compile the file into? If you are dynamically loading
#  the new code using dlopen/dlsym, we should compile the code to .so. If
#  we are compiling this to an executable, then we can set this suffix to
#  ".exe". For compiling to .exe, the assumption is that the user provides a
#  driver.c (or f) and is listed as one of the required files for code generation
#  in "required_files.dat" file.
# driver.c (or f) will be linked with the new code. So when you run the code, the
#  performance will reflect the change in the parameters.
output_file_suffix=so

# need to provide this only if we are compiling to a .exe
driver_filename=driver.c

# fortran compilation (note the trailing space in the end, which is needed).
FC_COMMAND="gfortran -m32 -O3 "

# c compilation (note the trailing space in the end, which is needed).
CC_COMMAND="gcc -m32 -O3 "   
